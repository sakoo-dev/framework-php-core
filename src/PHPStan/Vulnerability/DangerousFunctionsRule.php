<?php

declare(strict_types=1);

namespace Sakoo\Framework\Core\PHPStan\Vulnerability;

use PhpParser\Node;
use PhpParser\Node\Expr\FuncCall;
use PhpParser\Node\Name;
use PHPStan\Analyser\Scope;
use PHPStan\Rules\Rule;
use PHPStan\Rules\RuleErrorBuilder;
use Sakoo\Framework\Core\Doc\Attributes\DontDocument;

/**
 * @implements Rule<FuncCall>
 */
#[DontDocument]
class DangerousFunctionsRule implements Rule
{
	private const array DANGEROUS_FUNCTIONS = [
		'exec',
		'system',
		'passthru',
		'shell_exec',
	];

	final public const string RULE_SIGNATURE = 'sakoo.vulnerability.dangerousFunctions';

	public function getNodeType(): string
	{
		return FuncCall::class;
	}

	public function processNode(Node $node, Scope $scope): array
	{
		if (!$node->name instanceof Name) {
			return [];
		}

		$functionName = $node->name->toString();

		if (!in_array($functionName, self::DANGEROUS_FUNCTIONS)) {
			return [];
		}

		$message = "Usage of dangerous function '$functionName' detected. Consider alternatives.";

		return [RuleErrorBuilder::message($message)->identifier(self::RULE_SIGNATURE)->build()];
	}
}
